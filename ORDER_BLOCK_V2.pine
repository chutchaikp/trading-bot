// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © LuxAlgo

//@version=5
indicator("___ORDER-BLOCK-V2", overlay = true
  , max_bars_back = 4000
  , max_lines_count  = 500
  , max_labels_count = 500
  , max_boxes_count  = 500)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{

var float n_ = 0

length   = input.int(10, 'Swing Lookback'     , minval = 3)
// showBull = input.int(3, 'Show Last Bullish OB', minval = 0)
// showBear = input.int(3, 'Show Last Bearish OB', minval = 0)
showBull = input.int(16, 'Show Last Bullish OB', minval = 0)
showBear = input.int(16, 'Show Last Bearish OB', minval = 0)
useBody  = input(false, 'Use Candle Body')

//Style
// bullCss      = input(color.new(#2157f3, 80), 'Bullish OB'   , inline = 'bullcss', group = 'Style')
// bullCss      = input(color.new(#00ff00, 86), 'Bullish OB'   , inline = 'bullcss', group = 'Style')
// 22c1c7
bullCss      = input(color.new(#22c1c7, 86), 'Bullish OB'   , inline = 'bullcss', group = 'Style')
bullBreakCss = input(color.new(#ff1100, 80), 'Bullish Break', inline = 'bullcss', group = 'Style')

// bearCss      = input(color.new(#ff5d00, 80), 'Bearish OB'   , inline = 'bearcss', group = 'Style')
bearCss      = input(color.new(#ff0000, 80), 'Bearish OB'   , inline = 'bearcss', group = 'Style')
bearBreakCss = input(color.new(#0cb51a, 80), 'Bearish Break', inline = 'bearcss', group = 'Style')

// showLabels = input(false, 'Show Historical Polarity Changes')

OBScss = input(color.new(#0cb51a, 0), 'OBScss', inline = 'OBScss', group = 'Style')
OBScss2 = input(color.new(#ff1100, 0), 'OBScss2', inline = 'OBScss2', group = 'Style')
// OBScssGREEN = input( color.new(#00ff00, 80) , 'OBScss', inline = 'OBScss', group = 'Style')
// OBScssRED = input( color.new(#ff0000, 80) , 'OBScss', inline = 'OBScss', group = 'Style')

//-----------------------------------------------------------------------------}
//UDT's
//-----------------------------------------------------------------------------{
type ob
    float top = na
    float btm = na
    int   loc = bar_index
    bool  breaker = false
    int   break_loc = na

type swing
    float y = na
    int   x = na
    bool  crossed = false

var float ORDER_BLOCK_HIGHTEST_DEFAULT = 0
var float ORDER_BLOCK_LOWEST_DEFAULT = 999999

var float ORDER_BLOCK_HIGHTEST = ORDER_BLOCK_HIGHTEST_DEFAULT
var float ORDER_BLOCK_LOWEST = ORDER_BLOCK_LOWEST_DEFAULT

var OBS = array.new<ob>(2)

//-----------------------------------------------------------------------------}
//Functions
//-----------------------------------------------------------------------------{
swings(len)=>
    var os = 0
    var swing top = swing.new(na, na)
    var swing btm = swing.new(na, na)
    
    upper = ta.highest(len)
    lower = ta.lowest(len)

    os := high[len] > upper ? 0 
      : low[len] < lower ? 1 : os

    if os == 0 and os[1] != 0
        top := swing.new(high[length], bar_index[length])
    
    if os == 1 and os[1] != 1
        btm := swing.new(low[length], bar_index[length])

    [top, btm]

method to_YYYYMMDD(int unix_) => 
    string NYTime = str.format_time(unix_, "yyyyMMdd", "UTC-5")
    NYTime

method today_ob_highest(array<ob> arr_ob) => 
    ob highest_ob = na
    if arr_ob.size() > 0
        candle_date = time_close.to_YYYYMMDD()

        // filter only today
        tmp_ob = array.new<ob>(0)
        
        for [idx, ob_x] in arr_ob
            // ob_x = bearish_ob.get(i)
            ob_date = ob_x.loc.to_YYYYMMDD()
            if candle_date == ob_date
                tmp_ob.unshift( ob_x )

        if tmp_ob.size() > 0
            for ob_x in tmp_ob
                if na( highest_ob )
                    highest_ob := ob_x
                else 
                    if ob_x.top > highest_ob.top 
                        highest_ob := ob_x


    highest_ob

method today_ob_lowest(array<ob> arr_ob) => 
    ob lowest_ob = na
    if arr_ob.size() > 0
        candle_date = time_close.to_YYYYMMDD()

        // filter only today
        tmp_ob = array.new<ob>(0)
        
        for [idx, ob_x] in arr_ob            
            ob_date = ob_x.loc.to_YYYYMMDD()
            if candle_date == ob_date
                tmp_ob.unshift( ob_x )

        if tmp_ob.size() > 0
            for ob_x in tmp_ob
                if na( lowest_ob )
                    lowest_ob := ob_x
                else 
                    if ob_x.btm < lowest_ob.top 
                        lowest_ob := ob_x


    lowest_ob
    

candle_hour() => 
    string timezone_ = input("GMT-5")
    hour_ = hour(time_close, timezone_)    
    hour_

method notransp(color css) => color.rgb(color.r(css), color.g(css), color.b(css))

method display(ob id, css, break_css)=>
    date1_ = id.loc.to_YYYYMMDD()
    date2_ = time_close.to_YYYYMMDD()

    if date1_ == date2_

        if id.breaker == false

            // box.new(id.loc, id.top, id.break_loc, id.btm, css.notransp(), bgcolor = css, xloc = xloc.bar_time)

            // box.new(id.break_loc, id.top, time+1, id.btm, na, bgcolor = break_css, extend = extend.right, xloc = xloc.bar_time)
            
            // line.new(id.loc, id.top, id.break_loc, id.top, xloc.bar_time, color = css.notransp())
            // line.new(id.loc, id.btm, id.break_loc, id.btm, xloc.bar_time, color = css.notransp())
            // line.new(id.break_loc, id.top, time+1, id.top, xloc.bar_time, extend.right, break_css.notransp(), line.style_dashed)
            // line.new(id.break_loc, id.btm, time+1, id.btm, xloc.bar_time, extend.right, break_css.notransp(), line.style_dashed)            
            // else
            box.new(id.loc, id.top, time, id.btm, na, bgcolor = css, extend = extend.right, xloc = xloc.bar_time)
            
            // line.new(id.loc, id.top, time, id.top, xloc.bar_time, extend.right, css.notransp())
            // line.new(id.loc, id.btm, time, id.btm, xloc.bar_time, extend.right, css.notransp())

            // if barstate.islast and barstate.isconfirmed
            //     // n_ := n_ + 1
            //     log .info("id.top: {0}", id.top)

//-----------------------------------------------------------------------------}
//Detect Swings
//-----------------------------------------------------------------------------{
n = bar_index

[top, btm] = swings(length)
max = useBody ? math.max(close, open) : high
min = useBody ? math.min(close, open) : low

//-----------------------------------------------------------------------------}
//Bullish OB
//-----------------------------------------------------------------------------{
var bullish_ob = array.new<ob>(0)
bull_break_conf = 0

if close > top.y and not top.crossed
    top.crossed := true

    minima = max[1]
    maxima = min[1]
    loc = time[1]

    for i = 1 to (n - top.x)-1
        minima := math.min(min[i], minima)
        maxima := minima == min[i] ? max[i] : maxima
        loc := minima == min[i] ? time[i] : loc

    bullish_ob.unshift(ob.new(maxima, minima, loc))
    if barstate.islast and barstate.isconfirmed
        log.info("BULLISH_OB FOUND!")

// no breaker feature now ?
if bullish_ob.size() > 0
    for i = bullish_ob.size() - 1 to 0
        element = bullish_ob.get(i)
    
        if not element.breaker 
            if math.min(close, open) < element.btm
                element.breaker := true
                element.break_loc := time
        else
            if close > element.top
                bullish_ob.remove(i)
            else if i < showBull and top.y < element.top and top.y > element.btm 
                bull_break_conf := 1

// //Set label
// if bull_break_conf > bull_break_conf[1] and showLabels
//     label.new(top.x, top.y, '▼', color = na
//       , textcolor = bearCss.notransp()
//       , style = label.style_label_down
//       , size = size.tiny)

//-----------------------------------------------------------------------------}
//Bearish OB
//-----------------------------------------------------------------------------{
var bearish_ob = array.new<ob>(0)
bear_break_conf = 0

if close < btm.y and not btm.crossed
    btm.crossed := true

    minima = min[1]
    maxima = max[1]
    loc = time[1]

    for i = 1 to (n - btm.x)-1
        maxima := math.max(max[i], maxima)
        minima := maxima == max[i] ? min[i] : minima
        loc := maxima == max[i] ? time[i] : loc
    
    bearish_ob.unshift(ob.new(maxima, minima, loc))
    if barstate.islast and barstate.isconfirmed
        log.info("bearish_ob found!")

if bearish_ob.size() > 0
    for i = bearish_ob.size()-1 to 0
        element = bearish_ob.get(i)

        if not element.breaker 
            if math.max(close, open) > element.top
                element.breaker := true
                element.break_loc := time
        else
            if close < element.btm
                bearish_ob.remove(i)
            else if i < showBear and btm.y > element.btm and btm.y < element.top 
                bear_break_conf := 1

// //Set label
// if bear_break_conf > bear_break_conf[1] and showLabels
//     label.new(btm.x, btm.y, '▲', color = na
//       , textcolor = bullCss.notransp()
//       , style = label.style_label_up
//       , size = size.tiny)

//-----------------------------------------------------------------------------}
//Set Order Blocks
//-----------------------------------------------------------------------------{
for bx in box.all
    bx.delete()

// for l in line.all
//     l.delete()


if barstate.islast
    log.info("displaying ob...{0} {1}", bullish_ob.size(), bearish_ob.size())
    //Bullish
    // if showBull > 0
    //     for i = 0 to math.min(showBull-1, bullish_ob.size())
    //         get_ob = bullish_ob.get(i)
    //         get_ob.display(bullCss, bullBreakCss)    
    for i = 0 to bullish_ob.size() - 1
        get_ob = bullish_ob.get(i)
        get_ob.display(bullCss, bullBreakCss)

    //Bearish
    // if showBear > 0
    //     for i = 0 to math.min(showBear-1, bearish_ob.size())
    //         get_ob = bearish_ob.get(i)
    //         get_ob.display(bearCss, bearBreakCss)    
    for i = 0 to bearish_ob.size() - 1
        get_ob = bearish_ob.get(i)
        get_ob.display(bearCss, bearBreakCss)

//-----------------------------------------------------------------------------}

// ********************************************************************** testing
// TODO: create a new indicator like this, but chnage period to weekly    
// var num_ = 0
// if barstate.islast and barstate.isconfirmed  
//     num_ := num_ + 1    
//     if candle_hour() == 18
//         log.info("\nReset ORDER BLOCK, {0} ", candle_hour())
//         ORDER_BLOCK_LOWEST := ORDER_BLOCK_LOWEST_DEFAULT
//         ORDER_BLOCK_HIGHTEST := ORDER_BLOCK_HIGHTEST_DEFAULT
//         array.set( OBS, 0, na )
//         array.set( OBS, 1, na )

// Alert
if barstate.islast and barstate.isconfirmed    

    // TODO: reset before NY midnight
    if candle_hour() > 22 
        log.info("START RESET DATA NOW...")
        ORDER_BLOCK_LOWEST := ORDER_BLOCK_LOWEST_DEFAULT
        ORDER_BLOCK_HIGHTEST := ORDER_BLOCK_HIGHTEST_DEFAULT
        array.set( OBS, 0, na )
        array.set( OBS, 1, na )

        // TODO: ?
        // for optimize ?
        // bullish_ob := array.new<ob>(0) not working
        // bearish_ob := array.new<ob>(0) not working

        if bullish_ob.size() > 0
            log.info("Before remove bullish_ob: {0}", bullish_ob.size())
            bull_ob_size = bullish_ob.size()
            for i = bull_ob_size - 1 to 0
                removedEl =   array.shift(bullish_ob) // .remove(i)               
                log.info( "x: {0}", i )

            log.info("After remove: {0}",  bullish_ob.size() )
                

        // if bearish_ob.size() > 0
        //     log.info("Start remove bearish_ob NOW...{0}", bearish_ob.size())
        //     for i = bearish_ob.size() - 1 to 0
        //         bearish_ob.remove(i)

        //     log.info( "bearish_ob items removed remaining now: {0}",  bearish_ob.size())
    else

        if bullish_ob.size() > 0
            ob_ = bullish_ob.today_ob_lowest()
            if not na(ob_)                
                if ob_.btm < ORDER_BLOCK_LOWEST
                    ORDER_BLOCK_LOWEST := ob_.btm       
                    n_ := n_ + 1
                    str_ = str.format("\n[{0},{1}]-[{2},{3}]-[BUY!{4}] ", ORDER_BLOCK_HIGHTEST, ORDER_BLOCK_LOWEST, bullish_ob.size(), bearish_ob.size(), n_)
                    alert(str_, alert.freq_once_per_bar_close)
                    // log.info(str_)                    
                    array.set(OBS, 1, ob_)


        if bearish_ob.size() > 0
            ob_ = bearish_ob.today_ob_highest()
            if not na(ob_)                
                if ob_.top > ORDER_BLOCK_HIGHTEST 
                    ORDER_BLOCK_HIGHTEST := ob_.top
                    n_ := n_ + 1                
                    str_ = str.format("\n[{0},{1}]-[{2},{3}]-[SELL!{4}]", ORDER_BLOCK_HIGHTEST, ORDER_BLOCK_LOWEST, bullish_ob.size(), bearish_ob.size(), n_)
                    alert(str_, alert.freq_once_per_bar_close)
                    // log.info(str_)                    
                    array.set(OBS, 0, ob_)



if barstate.islast 
    // log.info("Realtime ?")
    obTOP = OBS.get(0)
    obBOTTOM = OBS.get(1)
    
    if not na(obTOP)        
        // b_ = box.new(obTOP.loc, obTOP.top, time, obTOP.btm, na, bgcolor = OBScss2, extend = extend.right, xloc = xloc.bar_time, border_style = line.style_dashed, text = "ORDER BLOCK HIGHEST", text_color = color.white, text_size = size.huge )        
        b_ = box.new(obTOP.loc, obTOP.top, time, obTOP.btm, na, bgcolor = OBScss2, extend = extend.right, xloc = xloc.bar_time, border_style = line.style_dashed )        
        b_.set_border_width(2)
        b_.set_border_color( color.aqua )
        b_.set_text_halign(text.align_right)


    if not na(obBOTTOM)
        x_ = box.new(obBOTTOM.loc, obBOTTOM.top, time, obBOTTOM.btm, na, bgcolor = OBScss, extend = extend.right, xloc = xloc.bar_time, border_style = line.style_dashed )
        x_.set_border_width(2)
        x_.set_border_color( color.white )
        x_.set_text_halign(text.align_right)


    


    